name: "CI-CD Pipeline"

concurrency:
  group: selfheal-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

on:
  push:
    branches: [ "main", "*" ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY_DECLAN: ${{ secrets.OPENAI_API_KEY_DECLAN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SKYVERN_API_KEY: ${{ secrets.SKYVERN_API_KEY }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: List initial files
        run: ls -la

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install requests pytest
          pip install "openai==0.28.*"

      - id: check_docker
        name: Check Docker presence
        run: |
          if [ -f Dockerfile ] || [ -f docker-compose.yml ]; then
            echo "found_docker=true" >> $GITHUB_OUTPUT
          else
            echo "found_docker=false" >> $GITHUB_OUTPUT
          fi

      - name: Docker build
        if: ${{ steps.check_docker.outputs.found_docker == 'true' }}
        run: |
          docker build -t test-image .

      - name: Docker run tests
        if: ${{ steps.check_docker.outputs.found_docker == 'true' }}
        run: |
          docker run --rm test-image pytest --maxfail=1 --disable-warnings -q || echo "Docker-based tests failed..."

      - name: Python-based Tests & capture logs
        run: |
          pytest --maxfail=1 --disable-warnings -q 2>&1 | tee test_output.log
          exit_code=${PIPESTATUS[0]}
          if [ $exit_code -ne 0 ]; then
            echo "[pytest logs]" > fail_logs.txt
            cat test_output.log >> fail_logs.txt
            exit $exit_code
          fi

      - name: Self-Healing
        if: failure()
        run: |
          git config user.name "SelfHealBot"
          git config user.email "selfheal@bot.com"

          for f in $(find . -name '*.py'); do
            echo "\n[FILE: $f]:" >> fail_logs.txt
            cat "$f" >> fail_logs.txt
          done

          if [ -f conversation_log.md ]; then
            echo "\n[CONVERSATION LOG so far]:" >> fail_logs.txt
            cat conversation_log.md >> fail_logs.txt
          fi

          git add fail_logs.txt
          git commit -m "Add fail_logs with code & logs [skip ci]" || echo "No changes to commit"
          git push --force origin ${{ github.ref }}

          echo "Running orchestrator..."
          python ./orchestrator.py

          echo "Committing orchestrator changes..."
          git add .
          git commit -m "Selfheal attempt [skip ci]" || echo "No changes to commit"
          git push --force origin ${{ github.ref }}
